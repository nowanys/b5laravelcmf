<?php

namespace App\Services;

use App\Models\Menu;
use App\Validates\MenuValidate;


/**
 * 菜单管理
 * Class MenuService
 * @package App\Services
 */
class MenuService extends BaseService
{
    public function __construct(bool $loadValidate = true)
    {
        $this->setModel(new Menu());
        $loadValidate && $this->setValidate(new MenuValidate());
    }

    /**
     * 菜单类型
     * @return array
     */
    public function typeList()
    {
        return ['M' => '目录', 'C' => '菜单', 'F' => '按钮'];
    }

    /**
     * 获取菜单信息时返回父菜单名称
     * @param $id
     * @param bool $isArray
     * @return mixed
     */
    public function info($id, bool $isArray = true)
    {
        $info = parent::info($id, $isArray);
        if ($info) {
            $info['parent_name'] = '主目录';
            if ($info['parent_id'] > 0) {
                $parentInfo = $this->model->info($info['parent_id'], true);
                if ($parentInfo) {
                    $info['parent_name'] = $parentInfo['name'];
                } else {
                    $info['parent_name'] = '不存在';
                }
            }
        }
        return $info;
    }

    /**
     * 删除菜单时，若有子菜单则无法删除
     * @return array
     */
    public function drop()
    {
        $ids = request()->input('ids');
        if ($ids) {
            if (is_array($ids)) {
                $idArr = $ids;
            } else {
                $ids = trim($ids, ',');
                $idArr = explode(',', $ids);
            }
            foreach ($idArr as $id) {
                $id = intval($id);
                if ($id) {
                    $hasChild = parent::info([['parent_id', '=', $id]], true);
                    if ($hasChild) {
                        return message('不能删除含有子菜单的菜单', false);
                    }
                }
            }
        }
        return parent::drop(); // TODO: Change the autogenerated stub
    }

    /**
     * 选择父级菜单的菜单树数据
     * @return array
     */
    public function getTree()
    {
        $list = $this->getAll([], ['id', 'parent_id', 'name'], [], '', [['parent_id', 'asc'], ['listsort', 'asc']]);
        $first = [
            'id' => 0,
            'parent_id' => -1,
            'name' => '根目录'
        ];
        if ($list) {
            array_unshift($list, $first);
        }
        return message('操作成功', true, $list);
    }
}
